package edu.ucsf.rbvi.seqViz.internal.ui;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Checkbox;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Point2D;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import java.util.SortedMap;
import java.util.TreeMap;

import javax.swing.Action;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.SwingConstants;

import org.cytoscape.model.CyNetwork;
import org.cytoscape.model.CyTable;
import org.cytoscape.view.model.CyNetworkView;

import edu.ucsf.rbvi.seqViz.internal.CyActivator;
import edu.ucsf.rbvi.seqViz.internal.events.DisplayGraphEvent;
import edu.ucsf.rbvi.seqViz.internal.events.DisplayGraphEventListener;
import edu.ucsf.rbvi.seqViz.internal.model.ComplementaryGraphs;
import edu.ucsf.rbvi.seqViz.internal.model.Contig;
import edu.ucsf.rbvi.seqViz.internal.model.ContigsManager;

/**
 * A SplitPanel containing code for displaying detailed histograms of read coverage. Create a
 * ContigView object, then call SplitPane to get a JSplitPane containing the histogram.
 * 
 * @author aywu
 *
 */
public class ContigView implements DisplayGraphEventListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = -7713836441534331408L;
	private static final int defaultWidth = 800, defaultHeight = 400;
	private JButton reset, zoomIn, zoomOut, zoomInY, zoomOutY;
	private JSplitPane splitPane;
	private JScrollPane histoPane, settingsPane;
	private JPanel histoPanel, zoomPane, settingsPanel;
	private SequencePanel histoPanel2;
	private ContigsManager manager;
	private Contig contig;
	private ComplementaryGraphs graphs;
	private long y_min = 0, y_max = 0, contigLength = 0, binSize;
	private int width = defaultWidth, height = defaultHeight, widthScale = 1, heightScale = 1, begLine, endLine, characterWidth = 1;
	private double incWidthScale = 1;
	private Clipboard clipboard;
	private String selectedSequence = null;
	private String graphSelected = null;
	private HashMap<String, Boolean> drawGraph;
	private CyTable table;
	private CyNetwork network;
	
	/**
	 * Create a ContigView object.
	 * @param networkView A CyNetworkView containing the tables in defaultNetworkTable() of the graph
	 *        generated by ContigsManager.
	 * @param suid SUID of the contig node
	 */
	public ContigView(CyNetworkView networkView, Long suid) {
		final CyNetworkView networkViewFinal = networkView;
		network = networkView.getModel();
		final Long suid2 = suid;
		table = network.getDefaultNetworkTable();
		final CyTable nodeTable = network.getDefaultNodeTable();
		final String contig = nodeTable.getRow(suid).get(CyNetwork.NAME, String.class);
		List<String> graphs = table.getRow(network.getSUID()).getList(contig + ":graphColumns", String.class);
	//	JPanel[] graphColor = new JPanel[graphs.size()];
		SortedMap<String, JPanel> graphColor = new TreeMap<String, JPanel>();
		final HashMap<String, Long> contigMap = new HashMap<String, Long>();
		drawGraph = new HashMap<String, Boolean>();
		JCheckBox[] displayGraph = new JCheckBox[graphs.size()];
		JPanel sameContigGraphPos = null, sameContigGraphRev = null;
		clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
		binSize = table.getRow(network.getSUID()).get("graphBinSize", Long.class);
		contigLength = nodeTable.getRow(suid).get("length", Long.class);
		for (long nodeID: nodeTable.getPrimaryKey().getValues(Long.class)) {
			contigMap.put(nodeTable.getRow(nodeID).get(CyNetwork.NAME, String.class), nodeID);
			nodeTable.getRow(nodeID).set(CyNetwork.SELECTED, false);
		}
		for (String s: graphs) {
			List<Long> graph = table.getRow(network.getSUID()).getList(s, Long.class);
		//	contigLength = graph.size() * binSize;
			for (Long l: graph) {
				if (l > 0) y_max = l > y_max ? l: y_max;
				else y_min = l < y_min ? l: y_min;
			}
		}
		
		settingsPanel = new JPanel();
		settingsPanel.setLayout(new BoxLayout(settingsPanel, BoxLayout.PAGE_AXIS));

		histoPanel2 = new SequencePanel(width, height, 1, contigLength, y_min, y_max, nodeTable.getRow(suid).get("sequence", String.class));
		characterWidth = histoPanel2.characterWidth();
		int j = 0;
		int labelLength = 0, tempLength;
		for (String s: graphs)
			if (labelLength < (tempLength = s.split(":")[1].length() + s.split(":")[2].length() + 1))
				labelLength = tempLength;
		Random random;
		for (String type: CyActivator.graphTypes) {
			random = new Random(70);
			graphs = table.getRow(network.getSUID()).getList(contig + ":graphColumns" + (type == null ? "" : ":" + type), String.class);
			for (final String s: graphs) {
				List<Long> graph = table.getRow(network.getSUID()).getList(s, Long.class);
				double[] y = new double[graph.size()], x = new double[graph.size()];
				int i = 0;
				for (Long l: graph) {
					y[i] = l;
					x[i] = i * binSize + 1;
					i++;
				}
				final Color randomColor;
				if (! s.split(":")[0].equals(s.split(":")[1]))
					randomColor = new Color(((int) (random.nextFloat() * 4)) * 64, ((int) (random.nextFloat() * 4)) * 64, ((int) (random.nextFloat() * 4)) * 64);
				else
					randomColor = Color.GRAY;
				histoPanel2.addGraph(s, randomColor, x, y);
				if (type != null || randomColor.equals(Color.GRAY))
					histoPanel2.setGraphVisible(s, false);
				j++;
			}
		}
		random = new Random(70);
		for (final String s: graphs) {
			final Color randomColor;
			JPanel newGraphColor = new JPanel();
			newGraphColor.setLayout(new FlowLayout());
			if (! s.split(":")[0].equals(s.split(":")[1])) {
				randomColor = new Color(((int) (random.nextFloat() * 4)) * 64, ((int) (random.nextFloat() * 4)) * 64, ((int) (random.nextFloat() * 4)) * 64);
				graphColor.put(s, newGraphColor);
			}
			else {
				if (s.split(":")[2].equals("+"))
					sameContigGraphPos = newGraphColor;
				else if (s.split(":")[2].equals("-"))
					sameContigGraphRev = newGraphColor;
				randomColor = Color.GRAY;
			}
			final JButton colorButton = new JButton();
			colorButton.setBackground(randomColor);
			colorButton.setToolTipText("Change the color of this graph.");
			colorButton.addActionListener(new ActionListener() {
				
				public void actionPerformed(ActionEvent e) {
					Color c = JColorChooser.showDialog(splitPane,
							"Choose color of graph", colorButton.getBackground());
					for (String t: CyActivator.graphTypes)
						histoPanel2.changeColor(s + (t == null ? "" : ":" + t), c);
					colorButton.setBackground(c);
					histoPanel2.repaint();
				}
			});
			String tempLabel = s.split(":")[1] + " " + s.split(":")[2];
			char[] labelString = new char[labelLength];
			for (int i1 = 0; i1 < labelString.length; i1++) {
				if (i1 < tempLabel.length())
					labelString[i1] = tempLabel.charAt(i1);
				else labelString[i1] = ' ';
			}
			final JCheckBox b = new JCheckBox(new String(labelString));
			b.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
			b.setToolTipText("Toggle on/off this graph.");
			if (sameContigGraphPos == newGraphColor || sameContigGraphRev == newGraphColor) {
				b.setSelected(false);
				histoPanel2.setGraphVisible(s, false);
				drawGraph.put(s, false);
			}
			else {
				b.setSelected(true);
				histoPanel2.setGraphVisible(s, true);
				drawGraph.put(s, false);
			}
			if (contigMap.containsKey(s.split(":")[1]))
				nodeTable.getRow(contigMap.get(s.split(":")[1])).set(CyNetwork.SELECTED, b.isSelected());
			b.addItemListener(new ItemListener() {
				
				public void itemStateChanged(ItemEvent e) {
					drawGraph.put(s, b.isSelected());
					for (String t: CyActivator.graphTypes)
						histoPanel2.setGraphVisible(s + (t == null ? "" : ":" + t), false);
					histoPanel2.setGraphVisible(s + (graphSelected == null ? "" : ":" + graphSelected), b.isSelected());
					histoPanel2.repaint();
					if (contigMap.containsKey(s.split(":")[1]))
						nodeTable.getRow(contigMap.get(s.split(":")[1])).set(CyNetwork.SELECTED, b.isSelected());
					networkViewFinal.updateView();
				}
			});
			newGraphColor.add(b);
			newGraphColor.add(colorButton);
		}
		networkViewFinal.updateView();
		settingsPanel.add(sameContigGraphPos);
		settingsPanel.add(sameContigGraphRev);
		settingsPanel.add(new JSeparator(SwingConstants.HORIZONTAL));
		for (JPanel pane: graphColor.values())
			settingsPanel.add(pane);
	/*	int labelLength = 0;
		for (JCheckBox b: displayGraph)
			if (labelLength < b.getText().length());
		for (JCheckBox b: displayGraph) {
			char[] labelString = new char[labelLength];
			String thisLabel = b.getText();
			for (int i = 0; i < labelString.length; i++) {
				if (i < thisLabel.length())
					labelString[i] = thisLabel.charAt(i);
				else labelString[i] = ' ';
			}
			b.setText(new String(labelString));
		} */
		histoPane = new JScrollPane(histoPanel2);
		histoPanel = new JPanel();
		histoPanel.setMinimumSize(new Dimension(800,400));
		histoPanel.setLayout(new BorderLayout());
		zoomPane = new JPanel(new FlowLayout());
		histoPanel.add(zoomPane, BorderLayout.SOUTH);
		histoPanel.add(histoPane, BorderLayout.CENTER);
		reset = new JButton("Reset");
		reset.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				incWidthScale = defaultWidth / width;
				widthScale = defaultWidth / width;
				heightScale = defaultHeight / height;
				histoPanel2.setSequencePanelSize(defaultWidth, defaultHeight);
				histoPanel2.revalidate();
				histoPanel2.repaint();
			}
		});
		zoomIn = new JButton("Zoom In");
		zoomIn.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				if (width * widthScale < contigLength * characterWidth * 2) {
					widthScale *= 2;
					incWidthScale = widthScale;
					histoPanel2.setSequencePanelSize(width * widthScale, height * heightScale);
					histoPanel2.revalidate();
					histoPanel2.repaint();
				}
			}
		});
		zoomOut = new JButton("Zoom Out");
		zoomOut.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				if (widthScale > 1) {
					widthScale /= 2;
					incWidthScale = widthScale;
					histoPanel2.setSequencePanelSize(width * widthScale, height * heightScale);
					histoPanel2.revalidate();
					histoPanel2.repaint();
				}
			}
		});
		zoomInY = new JButton("Zoom In");
		zoomInY.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				if (height * heightScale < y_max - y_min) {
					heightScale *= 2;
					histoPanel2.setSequencePanelSize(width * widthScale, height * heightScale);
					histoPanel2.revalidate();
					histoPanel2.repaint();
				}
			}
		});
		zoomOutY = new JButton("Zoom Out");
		zoomOutY.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				if (heightScale > 1) {
					heightScale /= 2;
					histoPanel2.setSequencePanelSize(width * widthScale, height * heightScale);
					histoPanel2.revalidate();
					histoPanel2.repaint();
				}
			}
		});
		JLabel xAxis = new JLabel("X-Axis Zoom:");
		zoomPane.add(reset);
		xAxis.setFont(new Font(Font.DIALOG, Font.PLAIN, 12));
		zoomPane.add(xAxis);
		zoomPane.add(zoomIn);
		zoomPane.add(zoomOut);
		JLabel yAxis = new JLabel("Y-Axis Zoom:");
		yAxis.setFont(new Font(Font.DIALOG, Font.PLAIN, 12));
		zoomPane.add(yAxis);
		zoomPane.add(zoomInY);
		zoomPane.add(zoomOutY);

	//	for (int i = 0; i < graphColor.length; i++)
	//		settingsPanel.add(graphColor[i]);
		settingsPane = new JScrollPane(settingsPanel);
	//	settingsPane.setMaximumSize(new Dimension(300,400));
		
		splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, histoPanel, settingsPane);
	//	Dimension splitPaneSize = new Dimension(1200,500);
	//	splitPane.setPreferredSize(splitPaneSize);
		splitPane.setOneTouchExpandable(true);
	//	setPreferredSize(splitPaneSize);
		histoPanel2.addMouseListener(new MouseListener() {
			
			public void mouseReleased(MouseEvent e) {
				histoPanel2.setDrawYLines(false);
				StringSelection selection;
				boolean reLoadedPanel = false;
				double barFactor = 0;
				try {
					selection = new StringSelection(selectedSequence = histoPanel2.selectedSequence());
					clipboard.setContents(selection, null);
				} catch (Exception e2) {
					if (begLine < endLine) {
						double tempIncWidthScale = incWidthScale * width / (double) (endLine - begLine + 1);
						barFactor = ((double) begLine) / (double) (width * incWidthScale - (endLine - begLine));
						if (width * tempIncWidthScale < contigLength * characterWidth * 2) {
							incWidthScale = tempIncWidthScale;
							widthScale = (int) incWidthScale;
							histoPanel2.setSequencePanelSize((int) (width * incWidthScale), height * heightScale);
							reLoadedPanel = true;
						}
					}
				}
				histoPanel2.setHighlightSequence(false);
			/*	if (begLine < endLine) {
					Point d = new Point(begLine, 0);
					Point d2 = new Point(endLine, 0);
					try {
						Point2D p = histoPanel2.realCoordinates(d),
								p2 = histoPanel2.realCoordinates(d2);
						JPanel seqView = new SequenceView(network, suid2, (int) p.getX(), (int) p2.getX());
						JFrame frame = new JFrame(contig);
						frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
						frame.getContentPane().add(seqView);
						frame.pack();
						frame.setVisible(true);
					} catch (NoninvertibleTransformException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				} */
				histoPanel2.revalidate();
				histoPanel2.repaint();
				if (reLoadedPanel) {
					ChangeScrollBar change = new ChangeScrollBar(histoPane, barFactor);
					change.start();
				}
			}
			
			public void mousePressed(MouseEvent e) {
				histoPanel2.setBegLine(begLine = e.getX());
				histoPanel2.setEndLine(endLine = e.getX());
				Point pBeg = new Point(begLine, e.getY());
				Point2D p2Beg;
				boolean sequenceSelected = false;
				try {
					p2Beg = histoPanel2.realCoordinates(pBeg);
					sequenceSelected = p2Beg.getY() == 0;
				} catch (NoninvertibleTransformException e2) {
					// TODO Auto-generated catch block
					e2.printStackTrace();
				}

				if (sequenceSelected)
					histoPanel2.setHighlightSequence(true);
				else
					histoPanel2.setDrawYLines(true);
				histoPanel2.repaint();
			}
			
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			public void mouseClicked(MouseEvent e) {
			/*	Point d = new Point(e.getX(), e.getY());
				Point2D d2;
				try {
					d2 = histoPanel2.realCoordinates(d);
					JPanel seqView = new SequenceView(net, suid2, (int) d2.getX() - 50, (int) d2.getX() + 50);
					JFrame frame = new JFrame(contig);
					frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
					frame.getContentPane().add(seqView);
					frame.pack();
					frame.setVisible(true);
				} catch (NoninvertibleTransformException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} */
			}
		});
		histoPanel2.addMouseMotionListener(new MouseMotionListener() {
			
			public void mouseMoved(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			public void mouseDragged(MouseEvent e) {
				if (e.getX() > begLine)
					histoPanel2.setEndLine(endLine = e.getX());
			/*	Point2D p = histoPanel2.cartesianCoordinates(new Point(0, 0)),
						p2 = histoPanel2.cartesianCoordinates(new Point(200, 0));
				int diff = (int) (p2.getX() - p.getX());
				if (begLine + diff <= endLine)
					histoPanel2.setBegLine(begLine = (endLine - diff)); */
				histoPanel2.repaint();
			}
		});
	}
	
	private class ChangeScrollBar extends Thread {
		private JScrollPane b;
		private double factor;
		public ChangeScrollBar(JScrollPane scroll, double barFactor) {
			b = scroll;
			factor = barFactor;
		}
		public void run() {
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			JScrollBar xBar = b.getHorizontalScrollBar();
			xBar.setValue((int) ((xBar.getMaximum()-xBar.getMinimum()-xBar.getBlockIncrement(1)) * factor));
		}
	}
	/**
	 * Returns the SplitPane created.
	 * @return
	 */
	public JSplitPane splitPane() {return splitPane;}
	
	public void graphSelectionChange(DisplayGraphEvent event) {
		graphSelected = event.getDisplayGraphSettings().graphSelection;
		List<String> graphs = table.getRow(network.getSUID()).getList(contig + ":graphColumns", String.class);
		for (String s: graphs) {
			for (String t: CyActivator.graphTypes)
				histoPanel2.setGraphVisible(s + (t == null ? "" : ":" + t), false);
			histoPanel2.setGraphVisible(s + (graphSelected == null ? "" : ":" + graphSelected), drawGraph.get(s));
		}
		histoPanel2.repaint();
	}
}
